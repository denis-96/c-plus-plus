// ---------- Как выполняются программы на C++ -------------

/*

#######################################################
Архитектура фон Неймана

Современных компьютеры построены по принципам
архитектуры фон Неймана:

1. Принцип однородности памяти.
Команды и данные хранятся в одной и той же памяти и
внешне в памяти неразличимы.
2. Принцип адресности.
Память состоит из пронумерованных ячеек.
3. Принцип программного управления.
Все вычисления представляются в виде
последовательности команд.
4. Принцип двоичного кодирования.
Вся информация (данные и команды) кодируются
двоичными числами.


#######################################################
Сегментация памяти

∙ Оперативная память, используемая в программе на C++,
разделена на области двух типов:
1. сегменты данных,
2. сегменты кода (текстовые сегменты).

∙ В сегментах кода содержится код программы.
∙ В сегментах данных располагаются данные программы
(значения переменных, массивы и пр.).

∙ При запуске программы выделяются два сегмента данных:
1. сегмент глобальных данных,
2. стек.

∙ В процессе работы программы могут выделяться и
освобождаться дополнительные сегменты памяти.
∙ Обращения к адресу вне выделенных сегментов — ошибка
времени выполнения (access violation, segmentation fault).


#######################################################
Как выполняется программа?

∙ Каждой функции в скомпилированном коде соответствует
отдельная секция.
∙ Адрес начала такой секции — это адрес функции.
∙ Телу функции соответствует последовательность команд
процессора.
∙ Работа с данными происходит на уровне байт, информация
о типах отсутствует.
∙ В процессе выполнения адрес следующей инструкции
хранится в специальном регистре процессора IP
(Instruction Pointer).
∙ Команды выполняются последовательно, пока не
встретится специальная команда (например, условный
переход или вызов функции), которая изменит IP.


#######################################################
Ещё раз о линковке

∙ На этапе компиляции объектных файлов в места вызова
функций подставляются имена функций.
∙ На этапе линковки в места вызова вместо имён функций
подставляются их адреса.

∙ Ошибки линковки:
1. undefined reference
Функция имеет объявление, но не имеет тела.
2. multiple definition
Функция имеет два или более определений.
∙ Наиболее распространённый способ получить multiple
definition — определить функцию в заголовочном
файле, который включён в несколько .cpp файлов.

*/