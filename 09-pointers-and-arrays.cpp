// ------------ Указатели и массивы ---------------

/*

#######################################################
Указатели

∙ Указатель — это переменная, хранящая адрес некоторой
ячейки памяти.
∙ Указатели являются типизированными.

int i = 3; // переменная типа int
int * p = 0; // указатель на переменную типа int

∙ Нулевому указателю (которому присвоено значение 0)
не соответствует никакая ячейка памяти.
∙ Оператор взятия адреса переменной - &.
∙ Оператор разыменования - *.

p = & i ; // указатель p указывает на переменную i
* p = 10; // изменяется ячейка по адресу p, т.е. i


#######################################################
Передача параметров по указателю

Рассмотрим функцию, меняющую параметры местами:

void swap (int a , int b ) {
    int t = a ;
    a = b ;
    b = t ;
}
int main () {
    int k = 10 , m = 20;
    swap (k , m );
    cout << k << ’ ’ << m << endl ; // 10 20
    return 0;
}

swap изменяет локальные копии переменных k и m.


#######################################################
Передача параметров по указателю

Вместо значений типа int будем передавать указатели.

void swap (int * a , int * b ) {
    int t = * a ;
    * a = * b ;
    * b = t ;
}

int main () {
    int k = 10 , m = 20;
    swap (& k , & m );
    cout << k << ’ ’ << m << endl ; // 20 10
    return 0;
}

swap изменяет переменные k и m по указателям на них.


#######################################################
Массивы

∙ Массив — это набор однотипных элементов,
расположенных в памяти друг за другом, доступ к
которым осуществляется по индексу.

∙ C++ позволяет определять массивы на стеке.
// массив 1 2 3 4 5 0 0 0 0 0
int m [10] = {1 , 2 , 3 , 4 , 5};

∙ Индексация массива начинается с 0, последний элемент
массива длины n имеет индекс n - 1.

for ( int i = 0; i < 10; ++ i )
cout << m [ i ] << ’ ’;
cout << endl ;


#######################################################
Связь массивов и указателей

∙ Указатели позволяют передвигаться по массивам.
∙ Для этого используется арифметика указателей:
    int m[10] = {1 , 2 , 3 , 4 , 5};
    int *p = &m[0]; // адрес начала массива
    int *q = &m[9]; // адрес последнего элемента
∙ (p + k) — сдвиг на k ячеек типа int вправо.
∙ (p - k) — сдвиг на k ячеек типа int влево.
∙ (q - p) — количество ячеек между указателями.
∙ p[k] эквивалентно *(p + k).
∙ p эквивалентно m.



#######################################################
Примеры

Заполнение массива:

int m [10] = {}; // изначально заполнен нулями
// &m[0] &m[9]
for ( int * p = m ; p <= m + 9; ++ p )
* p = ( p - m ) + 1;
// Массив заполнен числами от 1 до 10

Передача массива в функцию:

int max_element (int * m , int size ) {
    int max = * m ;
    for ( int i = 1; i < size ; ++ i )
        if ( m [ i ] > max )
            max = m [ i ];
    return max ;
}
*/